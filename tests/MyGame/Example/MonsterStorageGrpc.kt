//Generated by flatc compiler (version 24.3.25)
//If you make any local changes, they will be lost
//source: monster_test.fbs

package MyGame.Example;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer
import io.grpc.MethodDescriptor.generateFullMethodName
import io.grpc.MethodDescriptor.newBuilder
import io.grpc.ServerServiceDefinition.builder
import io.grpc.Status.UNIMPLEMENTED
import io.grpc.kotlin.ClientCalls.bidiStreamingRpc
import io.grpc.kotlin.ClientCalls.clientStreamingRpc
import io.grpc.kotlin.ClientCalls.serverStreamingRpc
import io.grpc.kotlin.ClientCalls.unaryRpc
import io.grpc.kotlin.ServerCalls.bidiStreamingServerMethodDefinition
import io.grpc.kotlin.ServerCalls.clientStreamingServerMethodDefinition
import io.grpc.kotlin.ServerCalls.serverStreamingServerMethodDefinition
import io.grpc.kotlin.ServerCalls.unaryServerMethodDefinition
/**
 */
public object MonsterStorageGrpc {

  public const val SERVICE_NAME: kotlin.String = "MyGame.Example.MonsterStorage"
  
  // Static method descriptors that strictly reflect the proto.
  @Volatile private var extractorOfMonster: FlatbuffersUtils.FBExtactor<MyGame.Example.Monster>? = null
  private fun getExtractorOfMonster(): FlatbuffersUtils.FBExtactor<MyGame.Example.Monster> {
      if (extractorOfMonster != null) return extractorOfMonster!!
      synchronized (MonsterStorageGrpc::class.java) {
          if (extractorOfMonster != null) return extractorOfMonster!!
              extractorOfMonster = object : FlatbuffersUtils.FBExtactor<MyGame.Example.Monster>() {
                  override public fun extract(buffer: ByteBuffer): MyGame.Example.Monster {
                      return MyGame.Example.Monster.getRootAsMonster(buffer);
              }
          };
          return extractorOfMonster!!
      }
  }
  
  @Volatile private var extractorOfStat: FlatbuffersUtils.FBExtactor<MyGame.Example.Stat>? = null
  private fun getExtractorOfStat(): FlatbuffersUtils.FBExtactor<MyGame.Example.Stat> {
      if (extractorOfStat != null) return extractorOfStat!!
      synchronized (MonsterStorageGrpc::class.java) {
          if (extractorOfStat != null) return extractorOfStat!!
              extractorOfStat = object : FlatbuffersUtils.FBExtactor<MyGame.Example.Stat>() {
                  override public fun extract(buffer: ByteBuffer): MyGame.Example.Stat {
                      return MyGame.Example.Stat.getRootAsStat(buffer);
              }
          };
          return extractorOfStat!!
      }
  }
  
  @Volatile private var storeMethodDescriptor: io.grpc.MethodDescriptor<MyGame.Example.Monster, MyGame.Example.Stat>? = null
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public fun storeMethodDescriptor(): io.grpc.MethodDescriptor<
      MyGame.Example.Monster, MyGame.Example.Stat> {
      var storeMethodDescriptor: io.grpc.MethodDescriptor<MyGame.Example.Monster, MyGame.Example.Stat>? = null
      storeMethodDescriptor = MonsterStorageGrpc.storeMethodDescriptor
    if (storeMethodDescriptor == null) {
      storeMethodDescriptor = synchronized (MonsterStorageGrpc::class.java) {
        var result = MonsterStorageGrpc.storeMethodDescriptor
        if (result == null) {
          result = 
               io.grpc.MethodDescriptor.newBuilder<MyGame.Example.Monster, MyGame.Example.Stat>()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "MyGame.Example.MonsterStorage", "Store"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  MyGame.Example.Monster::class.java, getExtractorOfMonster()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  MyGame.Example.Stat::class.java, getExtractorOfStat()))
                  .setSchemaDescriptor(null)
                  .build();
          MonsterStorageGrpc.storeMethodDescriptor = result
          }
          return result!!
        }
     }
     return storeMethodDescriptor!!
  }
  @Volatile private var retrieveMethodDescriptor: io.grpc.MethodDescriptor<MyGame.Example.Stat, MyGame.Example.Monster>? = null
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public fun retrieveMethodDescriptor(): io.grpc.MethodDescriptor<
      MyGame.Example.Stat, MyGame.Example.Monster> {
      var retrieveMethodDescriptor: io.grpc.MethodDescriptor<MyGame.Example.Stat, MyGame.Example.Monster>? = null
      retrieveMethodDescriptor = MonsterStorageGrpc.retrieveMethodDescriptor
    if (retrieveMethodDescriptor == null) {
      retrieveMethodDescriptor = synchronized (MonsterStorageGrpc::class.java) {
        var result = MonsterStorageGrpc.retrieveMethodDescriptor
        if (result == null) {
          result = 
               io.grpc.MethodDescriptor.newBuilder<MyGame.Example.Stat, MyGame.Example.Monster>()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(
                  "MyGame.Example.MonsterStorage", "Retrieve"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  MyGame.Example.Stat::class.java, getExtractorOfStat()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  MyGame.Example.Monster::class.java, getExtractorOfMonster()))
                  .setSchemaDescriptor(null)
                  .build();
          MonsterStorageGrpc.retrieveMethodDescriptor = result
          }
          return result!!
        }
     }
     return retrieveMethodDescriptor!!
  }
  @Volatile private var getMaxHitPointMethodDescriptor: io.grpc.MethodDescriptor<MyGame.Example.Monster, MyGame.Example.Stat>? = null
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public fun getMaxHitPointMethodDescriptor(): io.grpc.MethodDescriptor<
      MyGame.Example.Monster, MyGame.Example.Stat> {
      var getMaxHitPointMethodDescriptor: io.grpc.MethodDescriptor<MyGame.Example.Monster, MyGame.Example.Stat>? = null
      getMaxHitPointMethodDescriptor = MonsterStorageGrpc.getMaxHitPointMethodDescriptor
    if (getMaxHitPointMethodDescriptor == null) {
      getMaxHitPointMethodDescriptor = synchronized (MonsterStorageGrpc::class.java) {
        var result = MonsterStorageGrpc.getMaxHitPointMethodDescriptor
        if (result == null) {
          result = 
               io.grpc.MethodDescriptor.newBuilder<MyGame.Example.Monster, MyGame.Example.Stat>()
              .setType(io.grpc.MethodDescriptor.MethodType.CLIENT_STREAMING)
              .setFullMethodName(generateFullMethodName(
                  "MyGame.Example.MonsterStorage", "GetMaxHitPoint"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  MyGame.Example.Monster::class.java, getExtractorOfMonster()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  MyGame.Example.Stat::class.java, getExtractorOfStat()))
                  .setSchemaDescriptor(null)
                  .build();
          MonsterStorageGrpc.getMaxHitPointMethodDescriptor = result
          }
          return result!!
        }
     }
     return getMaxHitPointMethodDescriptor!!
  }
  @Volatile private var getMinMaxHitPointsMethodDescriptor: io.grpc.MethodDescriptor<MyGame.Example.Monster, MyGame.Example.Stat>? = null
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public fun getMinMaxHitPointsMethodDescriptor(): io.grpc.MethodDescriptor<
      MyGame.Example.Monster, MyGame.Example.Stat> {
      var getMinMaxHitPointsMethodDescriptor: io.grpc.MethodDescriptor<MyGame.Example.Monster, MyGame.Example.Stat>? = null
      getMinMaxHitPointsMethodDescriptor = MonsterStorageGrpc.getMinMaxHitPointsMethodDescriptor
    if (getMinMaxHitPointsMethodDescriptor == null) {
      getMinMaxHitPointsMethodDescriptor = synchronized (MonsterStorageGrpc::class.java) {
        var result = MonsterStorageGrpc.getMinMaxHitPointsMethodDescriptor
        if (result == null) {
          result = 
               io.grpc.MethodDescriptor.newBuilder<MyGame.Example.Monster, MyGame.Example.Stat>()
              .setType(io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
              .setFullMethodName(generateFullMethodName(
                  "MyGame.Example.MonsterStorage", "GetMinMaxHitPoints"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  MyGame.Example.Monster::class.java, getExtractorOfMonster()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  MyGame.Example.Stat::class.java, getExtractorOfStat()))
                  .setSchemaDescriptor(null)
                  .build();
          MonsterStorageGrpc.getMinMaxHitPointsMethodDescriptor = result
          }
          return result!!
        }
     }
     return getMinMaxHitPointsMethodDescriptor!!
  }
  @Volatile private var serviceDescriptor: io.grpc.ServiceDescriptor? = null
  
  fun getServiceDescriptor(): io.grpc.ServiceDescriptor {
    var result: io.grpc.ServiceDescriptor? = serviceDescriptor
    if (result == null) {
      synchronized (MonsterStorageGrpc::class.java) {
        result = serviceDescriptor
        if (result == null) {
          result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
              
              .setSchemaDescriptor(null)              
              .addMethod(storeMethodDescriptor())              
              .addMethod(retrieveMethodDescriptor())              
              .addMethod(getMaxHitPointMethodDescriptor())              
              .addMethod(getMinMaxHitPointsMethodDescriptor())              
              .build()
              serviceDescriptor = result
        }
      }
    }
    return result!!
  }
}
/**
 */
@io.grpc.stub.annotations.GrpcGenerated
public object MonsterStorageGrpcKt {

  const val SERVICE_NAME = "MyGame.Example.MonsterStorage"
  
  @kotlin.jvm.JvmStatic
  public val serviceDescriptor: io.grpc.ServiceDescriptor
    get() = MonsterStorageGrpc.getServiceDescriptor()
  
  // Static method descriptors that strictly reflect the proto.
  public val METHOD_STORE: io.grpc.MethodDescriptor<
    MyGame.Example.Monster, MyGame.Example.Stat>
    @kotlin.jvm.JvmStatic
    get() = MonsterStorageGrpc.storeMethodDescriptor()
  
  public val METHOD_RETRIEVE: io.grpc.MethodDescriptor<
    MyGame.Example.Stat, MyGame.Example.Monster>
    @kotlin.jvm.JvmStatic
    get() = MonsterStorageGrpc.retrieveMethodDescriptor()
  
  public val METHOD_GET_MAX_HIT_POINT: io.grpc.MethodDescriptor<
    MyGame.Example.Monster, MyGame.Example.Stat>
    @kotlin.jvm.JvmStatic
    get() = MonsterStorageGrpc.getMaxHitPointMethodDescriptor()
  
  public val METHOD_GET_MIN_MAX_HIT_POINTS: io.grpc.MethodDescriptor<
    MyGame.Example.Monster, MyGame.Example.Stat>
    @kotlin.jvm.JvmStatic
    get() = MonsterStorageGrpc.getMinMaxHitPointsMethodDescriptor()
  
  /**
   */
  @io.grpc.kotlin.StubFor(MonsterStorageGrpc::class)
  public class MonsterStorageCoroutineStub @kotlin.jvm.JvmOverloads constructor(
    channel: io.grpc.Channel,
    callOptions: io.grpc.CallOptions = io.grpc.CallOptions.DEFAULT,
  ) : io.grpc.kotlin.AbstractCoroutineStub<MonsterStorageCoroutineStub>(channel, callOptions) {
    override fun build(channel: io.grpc.Channel, callOptions: io.grpc.CallOptions): MonsterStorageCoroutineStub =
        MonsterStorageCoroutineStub(channel, callOptions)
    
    /**
     */
    public suspend fun store(request: MyGame.Example.Monster, headers: io.grpc.Metadata = io.grpc.Metadata()): MyGame.Example.Stat = 
        unaryRpc(
      channel,
      MonsterStorageGrpc.storeMethodDescriptor(),
      request,
      callOptions,
      headers
    )
    
    /**
     */
    public fun retrieve(request: MyGame.Example.Stat, headers: io.grpc.Metadata = io.grpc.Metadata()): kotlinx.coroutines.flow.Flow<MyGame.Example.Monster> = 
        serverStreamingRpc(
      channel,
      MonsterStorageGrpc.retrieveMethodDescriptor(),
      request,
      callOptions,
      headers
    )
    
    /**
     */
    public suspend fun getMaxHitPoint(request: kotlinx.coroutines.flow.Flow<MyGame.Example.Monster>, headers: io.grpc.Metadata = io.grpc.Metadata()): MyGame.Example.Stat = 
        clientStreamingRpc(
      channel,
      MonsterStorageGrpc.getMaxHitPointMethodDescriptor(),
      request,
      callOptions,
      headers
    )
    
    /**
     */
    public fun getMinMaxHitPoints(request: kotlinx.coroutines.flow.Flow<MyGame.Example.Monster>, headers: io.grpc.Metadata = io.grpc.Metadata()): kotlinx.coroutines.flow.Flow<MyGame.Example.Stat> = 
        bidiStreamingRpc(
      channel,
      MonsterStorageGrpc.getMinMaxHitPointsMethodDescriptor(),
      request,
      callOptions,
      headers
    )
  }
  
  /**
   */
  public abstract class MonsterStorageCoroutineImplBase(
    coroutineContext: kotlin.coroutines.CoroutineContext = kotlin.coroutines.EmptyCoroutineContext,
  ) : io.grpc.kotlin.AbstractCoroutineServerImpl(coroutineContext) {
    
    /**
     */
    public open suspend fun store(request: MyGame.Example.Monster) : MyGame.Example.Stat = throw
        io.grpc.StatusException(UNIMPLEMENTED.withDescription("Method MyGame.Example.MonsterStorage.store is not implemented"))
    
    /**
     */
    public open fun retrieve(request: MyGame.Example.Stat) : kotlinx.coroutines.flow.Flow<MyGame.Example.Monster> = throw
        io.grpc.StatusException(UNIMPLEMENTED.withDescription("Method MyGame.Example.MonsterStorage.retrieve is not implemented"))
    
    /**
     */
    public open suspend fun getMaxHitPoint(request: kotlinx.coroutines.flow.Flow<MyGame.Example.Monster>) : MyGame.Example.Stat = throw
        io.grpc.StatusException(UNIMPLEMENTED.withDescription("Method MyGame.Example.MonsterStorage.getMaxHitPoint is not implemented"))
    
    /**
     */
    public open fun getMinMaxHitPoints(request: kotlinx.coroutines.flow.Flow<MyGame.Example.Monster>) : kotlinx.coroutines.flow.Flow<MyGame.Example.Stat> = throw
        io.grpc.StatusException(UNIMPLEMENTED.withDescription("Method MyGame.Example.MonsterStorage.getMinMaxHitPoints is not implemented"))
    final override fun bindService(): io.grpc.ServerServiceDefinition = builder(MonsterStorageGrpc.getServiceDescriptor())
      .addMethod(unaryServerMethodDefinition(
      context = this.context,
      descriptor = MonsterStorageGrpc.storeMethodDescriptor(),
      implementation = ::store
    ))    
      .addMethod(serverStreamingServerMethodDefinition(
      context = this.context,
      descriptor = MonsterStorageGrpc.retrieveMethodDescriptor(),
      implementation = ::retrieve
    ))    
      .addMethod(clientStreamingServerMethodDefinition(
      context = this.context,
      descriptor = MonsterStorageGrpc.getMaxHitPointMethodDescriptor(),
      implementation = ::getMaxHitPoint
    ))    
      .addMethod(bidiStreamingServerMethodDefinition(
      context = this.context,
      descriptor = MonsterStorageGrpc.getMinMaxHitPointsMethodDescriptor(),
      implementation = ::getMinMaxHitPoints
    ))    .build()
  }
  
}
